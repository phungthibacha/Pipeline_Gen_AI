{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pipeline Sales data","text":"<p>               Bases: <code>BaseModel</code></p> <p>Sales class</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>EmailStr</code> <p>Buyer's email</p> required <code>date_time</code> <code>datetime</code> <p>Date time of purchase</p> required <code>value</code> <code>PositiveFloat</code> <p>Purchase value</p> required <code>product_qty</code> <code>PositiveInt</code> <p>Product quantity</p> required <code>product_category</code> <code>ProductEnum</code> <p>Product category</p> required Source code in <code>data_contract.py</code> <pre><code>class Sales(BaseModel):\n    \"\"\"\n    Sales class\n\n\n    Args:\n        email (EmailStr): Buyer's email\n        date_time (datetime): Date time of purchase\n        value (PositiveFloat): Purchase value\n        product_qty (PositiveInt): Product quantity\n        product_category (ProductEnum): Product category\n    \"\"\"\n\n    email: EmailStr\n    date_time: datetime\n    value: PositiveFloat\n    product_qty: PositiveInt\n    product_category: ProductEnum\n\n    @validator('date_time')\n    def validate_date_interval(cls, v):\n        # Set the allowed date range\n        start_interval = datetime(2024, 9, 1) #01/09/2024\n        end_interval = datetime(2025, 2, 26, 23, 59, 59) # 26/02/2025 at\u00e9 23:59:59\n\n        #Check if the date is within allowed date range\n        if not (start_interval &lt;= v &lt;= end_interval):\n            raise ValueError(\"The date of sale must be between 01/09/2024 and 26/02/2025\")\n        return v\n\n    @validator('product_category')\n    def category_must_be_in_enum(cls, v):\n        return v\n</code></pre> <p>This function is used to save data into postgres</p> Source code in <code>database.py</code> <pre><code>def save_to_postgres(data: Sales):\n    \"\"\"\n    This function is used to save data into postgres\n    \"\"\"\n    try:\n        conn = psycopg2.connect(\n            host=DB_HOST,\n            database=DB_NAME,\n            user=DB_USER,\n            password=DB_PASS\n        )\n        #cursor will create a connection with database\n        cursor = conn.cursor()\n\n        # Inserting data into the sales table\n        insert_query = sql.SQL(\n            \"INSERT INTO sales (email, date_time, value, product_qty, product_category) VALUES (%s, %s, %s, %s, %s)\"\n        )\n        cursor.execute(insert_query, (\n            data.email,\n            data.date_time,\n            data.value,\n            data.product_qty,\n            data.product_category.value\n        ))\n        conn.commit()\n        cursor.close()\n        conn.close()\n        st.success(\"Data successfully saved to the database!\")\n    except Exception as e:\n        st.error(f\"Error saving to database: {e}\")\n</code></pre>"}]}